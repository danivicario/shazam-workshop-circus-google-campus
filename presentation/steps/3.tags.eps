%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1395.000000 1020.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.5 (Build 18F132) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1395 1020
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1395 1020
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: MyriadPro-BoldCond
%!FontType1-1.0: MyriadPro-BoldCond 2.000%%CreationDate: 7/6/19% Copyright 2019 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (2.000) readonly def/FullName (Myriad Pro Bold Condensed) readonly def/FamilyName (Myriad Pro) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /MyriadPro-BoldCond def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /D putdup 34 /V putdup 35 /I putdup 36 /C putdup 37 /A putdup 38 /R putdup 39 /O putdup 40 /period putdup 41 /E putdup 42 /S putdup 43 /U putdup 44 /L putdup 45 /T putdup 46 /G putdup 47 /H putdup 48 /M putdup 49 /space putdup 50 /five putdup 51 /N putdup 52 /P putreadonly def/FontBBox {-150 -250 970 958} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF2E3C14A4A25ABB6822897674CC24BD7FFCD7B108877DB3F1D60870130F06D65FF41BB421B87F002FA0FB189A37316987F0990A1C3972A61734C28FF77B8EE2D1673598432792DD3DAC56ED3D16A0AA678C4646CA5AF43C1B5A4A01D495E992608BB2F3502DEB68A4C08B734CCBB2BB571EFF67BC464E71364BCC108D1E2BEDD6B7842479844EEC18418A20A9FB2B6314EA509FF62CADCEE2DD5E9AF35F793525664B427D5294C6B5B7959F6716E7A6354EFDCC70BE4A707F9D6F81DA2B1F59C41ED99D517E6457630D6CA8AC5EE09701FF4E28779F691CD84DA369F25506682C53D15E17F9B81031F5FC8C04EEF8BE47B38C6B0995E5A44B848547BC2BEAB09A175CCB14583204A2E2910A080DB1A11B5836654B7913718BF190E539A67E8B8FE229F9CEF6692F89A0FE6C18DD7BDEC2BB929BDCC1B480A3BEFD47DBA64213E74F0D31AA5B41CAEE10CDB906FFCE3AF181C2F216F75474A23AA2693E4438927E49747E7F162870A2B928C777C0E68BCA07A58D77AAAC1AE446319F8CEB4637D08BD211EA7C084280EE1520CEFBA73297804C4A91A1DF4FD2A18AAC2D739EA2E904ECA37C39057908E7B0F5CB3126A5B3416B543F03EBD6146BC6A306BDA7586AE9C9C56CA461DB5F0275F99224DFF9A315EBD76308BEBDD7F22D631F9D9C1D145CACD6BB26B0E4CEBD571F0AC6D6432CD3640C9E8E20EE35A6F080220F4875D51D6ECAB80B93FC4E2C205FB0BCE46B64B877AA6139529E977DF2C44B3097046DD5318CC1E30FB5BA7949244F779D05F282A8026D25B544A68D515E90E877C64E812C8BC5D2ECD11FAB768F76A7BB57348778CFB6B8486C70182117FA2BCE8F5C2B324FBF652269070657565A93E39CF66AAA855AE5DDE97772AA0ACFEE84BCA4257526C85FCEA6DEC4FAE7D6AECEBE3FC66B3AF3FBB98BBB0C09D0F9F1EE4A9E5D4EB35F8DC759C544BE973DC14F55667DFFE2FD9469B175D70C4A3B876ABF173430BB1E601EC009FBCE43CC613903C0328C2A5CDF3F2F51E0639810FC199DEF9469CDD47E14FC190D8221C233D614D6B98D8AACF293FE83948D8239E830551186118B8FDAACCAA5B947D904410962F6533C1AA49920D6C1D600F95B86D904F21B55D71E3AB21FE8A8944BBF347B8D944BFAB741AD6812BA6AD7F5504E0835F1BA80863ED65BE706897F2677AC0E5882AE2FB65A646D87BBD1E9EE30307434EF8911B6161DDC05BAF0C1182D76816425C7DF225CA6E8A42D74B4F9A39578301532BE6DAC7D7B5C2C2AE1B984B854F888A9CBC6B8DA3A3B4835269F9322DA73229593639A30EB1376BF28106A5D39456036D4EF5F89B899A1B213D1B9155D4B8FA9FEA95A6199F76D4B31393183C308684EC47576589362E67D8BC8CEE403D768E4451F948F44FB76D49E3E99779810CABCDF45FF30D0D07DB5601638F6D84EA68186FFF5E7692655C22FBD21505DC2BC1206C3B35D7FFF18B5BD813E0D10E3A28D68F050C15C9E7C00D3DCC31A517041C2C37908D22E3E80C817EAC238F860F345571F7D33B923C8E9E492604A5702B8B70E8351E6D91EB1BB10788E22CB767A86DCCE382A73534BFED21E1C5B246FEA03C8A2A87BB94F62AF74FB838892650074851BA65826CD60216CC8E4E9C03420DEB1CCEE617884757A4D1F124977743A190C88D8A9BC172679484F2B1757867C6FBF69D98344F414FC7192B374F0890F7F2D2E9587F0653215B91436D23B782BF2EF1A352074FB753EA1B3BDF8F8AC164A187E6E68A076EA1DA140D710A5916E18DBC68A680EBEF75C95B27BFB0E5B32063855AE3551594A646CABCB2B54FBE145C719CEF9D3362C93B332E95F2D0A89D2DF4343300F07EE4A484C6F3B970C247CFAC5B0A9AD0F32082544C5444CE580F5A6103078925AA9FB243FEC443DD2F007D76A25B2A7244FBB5E6D9252EEAF633CCB2F1D47E235FD37BF67E87E1D8273192EB30E4D4CE523108980BAA513EA364C84CB4DC8C88325296370B8CFF264A3C8E1591B04E1E365F24B3C3BF6C5BF55E30A3F31361ECB6B84F3EECD6D83B6911A81AEAF37D28350D55C93C15B27C8E96BE755C4F620D4F451C3728AA644CB09A6A1E036FBECC431DD24BE425139C03CAAECB2793825037EC3E8D96727A746D55C4BF6F60C44B97464DE6050F7E73B3C9FE2724F6784A872CA9A0E473D4C8F75F96B9C61AEE45679315DA4893A50D89C58B5D7CEB8CC19A806354D9E5F12ED94BF15749011F20443F4A35A9C778C15C52B5818A869EB4EC3B27CDABC16E20A6557E480C6933CFE95B7A7C5CFDF299E94F842A7A3A550C7105B6443324BB595D0738DB03FF2E20B2EF4DB1459520265CC715DECEE667BDFF5A0A58C902E05201AEECE210B1381325D5E87E0387203348DA52451987690B5484E2E34E46DD162912F09F42B9E2AADC607C0CB8B947A0A0E29677CC3839E4F9714F571DF2CF3666EFDAE36D0529342C7B3969F0FD32A0891D6A2D5518E38D8306DCF0E1900D394CD92C78A45D9BFBE0A7FF1F45A3C94EE755923A8082670F04589E32A8B6BA2DE17C96FF2162AA969C281DA83248FE571D3D49E4F4077F42786B040E0CD06DD8E85F1499A36282A120D7A1EDA2693D893C3A6C1A7243189F1EB3EEABB9BFFD40E96BB94D915C0EEF03621240BCE1BF7406C7897176713062014A5B723DEF018162E18A0F63CE06C99741DEC3B2721EBA499C0E27C9A7759D84CB64A05473544C4678F98B440614CAC94846A9C7525D2B1DBA2D6A072467F298E6322169D57E0E1DD2F0264376B8B5D2265490AFE80E02E20773F3A780A694D754C8EA38C16A0DC701A71BD29F25A0CBD8ABDABDF5513C256BB41062B11D082F2F02CF3C87AEA177F83EDE0EFD6D0F3A3411892678F0D491508510CD6BD720A8C19C8B60AB0B9F38C49648140BCF18C3667B3B987DC832B4550040B83394BC639543DE7F29D420AB6C27E14CF0BC786849C0479A4411E918B6CF5F8B17C46F272249BE072F36B688590CDB51DE0A7E2BDDA8A6A89A0AF79139B1E65EBDCCD991848AC797402995210B585D369577B16D96B89309A5A997C1DA6C6D8C9B9DEFD645152E3A00D649C5FE26CCEAB52C7FD59C240BD5B947DEAC1FCCF503F43C396CD880ECBFCAC489D3C6B5EEF57A1F932FF8DB95BF40297A0E99FDCC899FAF069465E2190B99F21C0DAEFA5E69D5AB3DFA31414F521679F8B125505034804635D3E683A182752B144C698AA1008FFC1F35CD3176EA9F7458D959B5A30AF1CB7A231DE5B2404E514D1C662CB82D7FA798E6EDF009F82E8A37BA77C64235799782C8C6A261FD3386AC6D3BD7A4BD1CBA23843906381DD76955C213EC7E527010FD864634836CA328A7BE308105BEF2FC05A3270055FD6F9CBD759AF95486BDCE72D8B65F85C3D8D33DFC96C5A403C22E796F6CE22C3BB80C073EF3C07E142A4F38FC953AEC9F1EE5EBCF4805339A7F13385A19C3006DECE671AFA1F8D3278A5B40909E481684B60D0D3ABC41D495EC2EEDF8F6A8EA831081ED80B2541C35CBBEB5800F0EBA74CABD9D5924115DED96A61F362FBCB01FB24E4E613A781D1B129D90A56E51F2DBEC96323DC2920C2CBB977D83ED12570897D2A8DBEB72F084CE052240971B0CE97CBB81C96746BBBC758C52DDD0CB67AB5A72B33D90C4EF726F159A303DC868BE6FEF9E29356AD75003577357C97D6B88B2D7487BB1FC378C593B28C3CB31AC8ED51483E948DA0B1B310646A2E533363A924B29F46AC8706A399FECEADFCBAE2AFB07900D877639927BE45B3A1F2B4691CBCD27C96336722D3AF0F74902BB26E9CB53799456CB4152037140E89B65192D380647BBDA6C4EF90E3CCB03D805B43CE40954EF6ED222FCC4165A84ED180EA202E42A26D48FAE5D21470BE799C783BDBD425ED17B1514EB2CE6AE0134B01291E99183F6FA9505C4398A220147695F59E15A5BD0B29285F1B1C7A1012730F60F52C2BE523DFF30459A165E8984C13FA1139F30926B884D3A81BEC50381DAA29BD44FF2EC45808AD6F64AADC7ED7EB6189E80C043DE996D9BE8062946D87C21CF1F526629333AC5AC7D230110B963636042CA70A6EEEB8494B00B0177EF7AB2C6A9FDD77B9E433E5B14A408027B64AC940A26A68B2CA3B869F372E437CB0F5EA73A1B0A9B03420977EC221A90CCECB6AA658B5272AE5096F76D63549258BAE2FE66AE464E80DF9A0C2E0FE7934B4C0FD05691C19833B6A2B8C437E945D024F8BF9F9FF32AB25ABD17C869800C68E77EB6B70325EE0E65F52EC478069B06E92A6FA32224A1563EBD4EAC131C76BA6D41881C5911A5B5DB5DFAD659126DBDAFC5D65577C043D9A5D0C0C1A295EEB06FA8D455AE77ED09D4E8BA5EC59F74740B175239F929978593DF941F4D16B4218781EF5FE5EDDD573C250B1AD76C063443A7A3E41315E7B1CFE32BDE1B1C2A2ADDE8A608F42220BE2C4B4B7F65EF0569F264BA9967AB446E0866D966793237A9BDDFAA413F736FBC6DF3D87B9DB7656D1AB5FBF71E8044792DFDE8DEC0F31C8A8E6D2AFC8CC05B6D4306587D2E2BFAE0A89B8370187945061AA9C9867A8C835066A8711AE45C49CAB249BE98F0000F05370E68B5A05CF4D903EF2E796205C13CF680BA6937BFD1B8312D7DA1B83840E6C6BB12E015BB327E3D5FAFBF6F4193F1D34CE7B00270E845749DFE01CDEF802FD51B7EF31C084FA20AD8461B09DA8D832ACC016BF8E679520312FC8298C713F7E03DEA4B84253840F2C3FE1BBFB845EC0D3253288A3644204EC7164AFCFB69F1A1D482FA994DDE70092023F4F4B41AB884E627A6F23FFFEA21AEB837E9AEC5A3D68CC5AA912FF85DE88F891E4650A6C823B65CEA3B3165A8E218EC97ACF2877A31F8F954CBE17764EBED26D2CBA5C09045FA1C3394BEC8A89916CFC80213188AD10E500F0CE1DCDC187E51F0B293EDA252F0A8B5C328E8D5D588ACEB595043C0701C9B644F26339CAAA9CB09E871A3FADF327DDB2D1D3EFBBA5344CC3059D407BEDD8936FA200A5D4583E8F2B10CC04F4647C1B67F893EEFA4FE2FFCCBE3D465EB679F68905AA6FB27C99628EBC19B89E42642853F5DBBEA78C2D5CEECB281295C3177942331615ABA6880B44EADEF4040957CA83428395F79ADD0768E0266E3D5E09B32ACB2FB9882A268B9DB9338D0B62879C406A70C2CCE3A1B8FAE9530036B3931D57ED739C64DA3873B2CDEAAE5CC96A706B8EE0B7F148C906FCEA233BBB22B192209F58AC6A8A42F4EC4AC342AD5B2ABEBD451067729E041A61FE911E5047721E0EC3DE49E971C184A201DE83D74F5C0D927A8C6FC4CBB9C805DEABEDEFF64F736D826CD0E97D943927AD7B39BC97E9DBE30C9C87A623F5ED8798B60AEB2B3A67A30B1A0C9D86DF802884DCCF7778125C301644C7E041F7C95097B99E0E9C01D6A3D0C2CF0846B48423D95D4C2D1E664F0FDF8A30F946BACB55F837FC4FB81F9A9E5A5EDAF7B1074675F69F61D6D9EF80CD325EA3300586838FE7C695F1B589D2301A61FAC298CC43081B2FAC139F1F8CE65AADED57B49B3A8382B6DE18B5A5D0F94CF30FF663C3397F3BFC1CF14DB89B8C0E4C99359C07A12E6ABEEA4D56415B24CC733E01295E5A72F199EFF674297363D4BBD570710E9584EB8ECD86043E259A2F6FA9E23472376E8A4AD3D95CC4E9C45ED7850707B506532C70EFF11C56D1FE1A7B74F5098C05957DEC9A3AA227379C027617F1834B3A502531B44CF9FD956729AFB50C7BFE7C068F2E2178CBE9B7BAF4A7F8BE0235B67B3D31C0B9559A54EC27497BA45ABE1DF83BA9BCFA01E107D3C252BB03CC4BF69ED58177780E90F23A60D4D8ACAB7198636E56EDCA6036A1E1535143E53A918CA6741614FDB7D9EB32322510751E52A848883B59AA64A9725D410C03A375319D79A4F9C11CE043D55A7388D253B204479C9F42BA96463AE7ED99BA0A3CD193B9510940A9C3168F125B9B69E78EBEB52201C87F253F2A7280F15987E419EC556C4938DA10C7A6B033A16FE5C331AD00D74DAD58C3175A3C61422010AACDA2162F30DF01DC2ECF50603939C8711351326EE115541B2581A0B5C5DF0DE337891A9C05EE39137E93682A2ACA45E491235DF5D0182B017F8BEADDF3AF2F0E26939B3E1D7ED44DD38DF1DE83A58CE3A55AC93CDF5D862A470FC4BA8615E06D14468AB299DFC82C4EA5B3CAD7C649B1258B8179FBA471436DE445F9E3480DB4997558508AE0809353FB86DB67E17C8D21912E00F171EC32552D2395AF633AB48789536C0727B09D86D64204A2A194EC21C75E97A28F48C6C925F99342B492E2364349C34060092078CBD893C780562F50C32D969A0BCD51232D2DEBA660D8A1904D375D1F22708201E7FD26E69511595098B0E1B3797594B419AA681B7F1CC38810E52456F579C874C88075FE9828A821026EE87860BA4F5017FC062DA7229703B978448BC518A93F1792BFF563F81015EA0890030ED067691DB686ADE0C32A71A44A00D87B000A496F2A4E9ED4496AFC84F3B97EDB9908007A1B30278A899223A058263F5FAEABC34EB9E7F9325B6F2E90DD8DB6301FE04D6F2EA787139CDA6034138FE147C7E46A2280659CEFD7A7749BF44C2EDD72DA2BDA034CB60B531986258228431A363DAFAA8CECBA26D7101E3AD9603A476F517B0D5D7784B8DB254655EC3349AC4B657F139FA89F5E3F8A65E11D7135167348F76C9E97DDF00AC1238C391A9A87F2A9B7E4D603531FD1DB0C124D5138E3460730CCE7C781B4BC5549E64A635FF94ACBF92F4CF183272379233FFCDE641CE54F0166F07B2C43ECAC025DE54B87ED80247F9CFC4CFC998442FDE14E426B0B36E1BEA353AFCF2C7B55DE3AB29A6F0C5DB9B53F1A6F4C561A006D9AF5F1B4D48D8E37E2C47DABDA87C913D23032F3110D20FA74C4FC78052234C54E304C5E3247F083A91A6606C5054FD135847979E55378290121A2DA249531A9C6827577CB0E1B0B8F88170A4B63C2683159BB4EC058C6A6F146AC5E96917D70E878CD6AA0C21988F62345C6F033A794C31BD95A084979F4E902B4E4ABCDD51D22CBD468E9AD573188D897F95368330FA4585BD5AA8DA3B11F8EC17DD33B77D04FD59A547F734679AB32A847B82124C2B5F849D4FD0D04986B2EAA3ABC4484C4DE7C9A481FBCFF2762CB3E6B57E6F2201C5896ABAB2A7C46452A3571370262F4781ACE962F22B276A6C6A451EC1BB886930C3BE04337A1B0AF852AFE3571253B8BC728EF43FDFA509C991019FF8DBD30DA834D07F0BB08B8576A3696B0280CCAFF4E2A19F5515FE27C452E9E615B40103527CEB530FC13884736B25D60E4BD06DEC2554F06BFFEE99B8AB67534B16330AFD8F28A257D261E05464D4B07E7ABE356AFAE902145EBD8BAB054E0E185F8F46DFD27890EC68F91D7D03686FC312E8CF3E11D15E6C784AB09E750AD173874456798DDF225C5345DBA65FE21F71D92B015027AAB4B44C752EB1B80F422DA60510393A0D0BC5D267A304BA04F8C07777AAC4D002C95542A717D67E8A7737D303835F0043F7DBF4D9DD066AD9FC21679035E1C2167053E4A2CD290693E892BBB7FC2994130DDFD0EF47943EC160BFF6029477AA88B1E2A1EC58704D27E19555C9290CFFB4EED064CA5EA88962DD6A02052F7E2BD2887C7C24F8F6709DAA364550EF72D5D0F12E80368163CBA48E6BDC104CCC069880960611DA316EBE356F9B2D0AA81B414D7A6F5181819C3F14478A2A6B11D73A541E832A2709EA56BD2558CB07F81A0AC8CD1A197C54A2D833E716D622B365773D982D8C497B5B20A9A4DAD42E71FC3DA7734D2A72A97A00EACAAD119535F0DF5F7231BB851CF567FAD3E8A78A3B45484200F0F2D6FDA66256237E2C8D1BDEB1A1941C3426733A4EBB136C55C048A81A54849AB307EABCCDF0064E82E31BC39BE33D41F93900EE4464E3756BD9F8D18E84D8D44CEB96ADE729297FD7189B6173DBA445BE20D61E593CEC2378C11AEEEDB4E63BE1962EE0ACCBE77D4533E221BBFE762BD292E06B730B17FB9F5FCF292DB59A64458ADB5D5A4C2A9C4AB6CA99263060B38AA9A72DFFDA07EFF7368BAEBBB496622EBD76B72E4D1DCE28A018373B153C7C1E90707D851145B49EFDF23E0C323AA09B88F6ABBCCA9831BE0D728E86205FA0BAD80C3EDDB3DC17D29E597EE2A509394FEFD7A2AE52A079E1E4435A52E8D7EC353E7D81DB3C7F2F9037FBF366F491A3E6DEDB5B032A6D45BD084D66F8565F4E522518A5D4A48C7190B106FAF7AB4D8D807961392FB22C4F81B8E4654F652C8DC86DD3662306521C6281095348E5CD9C5638ED972983C63819FD16EE957AA989CF03D9F4A9E48B06EDC1B1BD0BE28C9CFD53C762B93F10C782FDC356BC60293730F2E71384B6138BB3EDC3EB7813CD05C6D5EEDFE01CED428D2399E15B6D5C39131BC42B1B91047C8B932484B9B968FBC4E308FF48146FD8175CD0B537BCDECFC37522D31AF757FBFD7A3BCCA7224A4DFE1B7B3B494B1D7215C7B18AC3A9F7B96F01AF133ACC56C5CA559EB38B5F645B207357A2041C642A85F6D60C6E12974DE3C7E8F366C9611B94493B0BD06562543BAD25909D3234D19B993595AC286EA0CB99627434A0A6BBCD5B93DD1FB8839964F9421BE8959962886AC48F8A3B1011F0D59B355AD5DDC5AB0E1711BAEF187BF2B0150F2F0E357472D4F87382BFF3383ED58C77828976D7CB1D464DDF949BD542A329F69480E7EFF939E800D55BC335CF3F9836441585BEDB4A81F628D4B53015F47CFC5E6FC093018176A44215AAD102E0184732328FE7F756BFF6F1C2166113B7E93213EBA1C90224BC433E85E08E66C528C299A0D5A8C1AE4CB0FD382E263E3BE59FB52F7AF00EC336714D5F1BDA89D47AC179355834F666DDE6DDA31A900B89A3D1F643572C9B968BFA7705F141FE3C91A7F1FBF6AC3D979976781267983CF11DA31B538F0D737F32036BB568D5DC7F18585EB004FDCA74240B0E79A5CC21229594EE27F90B289F90B1D95F524A04CE96D887F9A1436116964ACBD8643A3839515C90DDD8AB463DFC36C96E1B6EB4682DB6827677C7A856F68E2AE3A66BE97EABC8E6F4DC96160513C9D083D5CA133400042C0CE84329FB7159ED03E7EA08E8033461ED5AC353340AD992F19D409FB0FF226901576E50A8A93E3FD55E1A2392EA4950D391C888704193CE8C17F88A7123B9BFB7AEE2C948508EA8197566B13ADE6A8D48E0E4002CED5FDBB410C8A81926290E0A4D7D136C59975DD528092C652A0A66AF9231CF9047923DC5DEF962B472C41767C222338A8BE0BDE32C2DF9519E62CCFEEEEA8276DF5C51A7CB1A82996163C86C7DB62ECB4EDDF553B95E09F7D2BBCE54F0F9BE2648C62E758FDD238DA33F878D00D6F0EA9CC5D95C94D5129F592CAAD63A08747CD9C122DCB5EA8F322A33DA5490E6682F4BB5A2336B0B688E8DA4C0601C57F5B7B171FC54A6CC1DFC1A410B2BA216B35074BDF2DD102276C3A3A6C97DE1593BAE84CFB70EF356353862EB379C9625C5FBA18FD4DDD1B07D7B42EE00191B98564F1440FB9A22F39F0A942790F731F5891603BAE4FADAC3F0F3FAD93F6350D64BAF127E2A5F22EA49A9EDA72A0063E6E074D3BD612198494C150C52839522C97D23467EC235E96D5D50B9B135580D617EDF58FBFF5E25B63F7C7B8D571C3A7066807DC755F2A678CC3194CF3AAD69A2261B830CD79AE0597D47DCF0CF37560C27EC5A0B06D126FC67805991683A9A144DEAC8EADD787DFB70B0D81B855B09BC21EE57174D8F7B113D753F9CEFCE45AFBEBFBD4129FA6F5590FA576AF2022F452D00E6C3F4063DB4EC620895104BA990E8D22F2A9215FC75EC594363D9D8E5901B1B11A8CAC1ED0EA8C0CF9C66AE6C0078B7695B6A76B29405607D81616C1A4A41A6D144337ADAE9617A204B610F1DE3A58798E749E4EF633EBFFE6FA712E3193D75F4BAC0137BFE9FBA3F028B2AD01EAE8D348D18E3F52A86A973BCB8E0B9016F6101D46B2ADBBDB664EA5A3E277CF8F44AE97EBCA11E8C7DB3F5388B634FED1CFFD2AE4D5E4BA8F38643A73FE5B51E5591D08DA80BFD0641A84DB2009EF56E6314E8527E41C3DC7F9C9F191C4BD44676EB6B4C90CBC15E58F323BA558D275AAFE73D5CC2A4645F3F0348A074792E173BDD0A4632BB58F0C0C8E6FDD8ACE3C966E4BA1DF8D164BEC1AEF765E4664A04C997BA6D7046B2399E078CFBCE3BEA54B90D1CB3AA1C0F756479AFE85E10D489AD1BA4450ED3056DDA6B21F64810E97EF9F4DD1663A58B3E58005DCA392AF4B6BCDF0FFCC0E60C4E7988764781797E2EB6C62A00E224324517D1B6281A84DFA62835FE44DC5C3DA1D22AFA62E2C8ACAEAAC52C988379EF8646EC019EE2621C747DEFBE7E0CCFB46B1335A7ED1FA79EB54AD6BDF7B148ABE9F6E5CFAAF258A74DD54E01434859380CBE7F2985C73A9F3B86D31B8B3227810D99B483E1A2021819FD9367BDFE2D6E3123FE82945DF37B994E08101193E4E3FB4CF36D476A86DBAE24787DAE9EBA36C7D956A73CCE674DB9085AB8844FB9BA16F616A4BCFD778FA377B7BCC67D2FFDC91BD974E4235AAA990B2F38F33336E20A9BCB2E2BAA2F1E849400A76E9079B658C53C22F4CEF804FC210E9E3DD63F80416A6D9E55FB1D59E10C02E052A15197EFEF1ACE3981780EC8ABD352AB8E7048011C53BC974D850D2963A3797B498B2A7208D5F9B330F5D9667203C2207AF5982CD6AA33F595B4E56ED1D14A971E59E348E2A5475DF2AF81E4BF6E584D0957012E5A6B5F44F321A1F60ACD7A321C731DF9427E8C3CB3D80EDB2A9CBD2EEFB01052359E05208127F1FC35DB9C53FFCE7BEABCE4929A43B0F0830E606A10AD8084CA5423C0ABE266E15E92608C4A609C620EA285A0A3C46F94441A525B5F0D7E139E2010F30F667ECB32487C39E64BA47C381DCE4D468B7D863E72474627DCB510022B81A2305E47A2DD6B16450207A24FC6FCE0C4B0763E94F4874BD7DAB7EF0A7F2BD99DA8031FEEFBCF40356413D1C9ECBA6D0420383328C121F1A0004FB47BC76AD4EA79B5762F7756EA951C68FFB10E5AF815ECC1856FD202A1300D2640A353B47F78162F06BEFAC08EDE068BBE7C5510DAE07B1CC6DAF9405EBE7E854B5E57EE20F602CB5D71E4FE7C04BA58A60CF8762FEFB661E6B1C2ED249A80B503FAD87811FEF4666B49E5FB4CC01E2C6FA81D74CC779D733F531FF661B8BC0E8296E6BE80749E9A081F47EF9CC9A4EBD50F3B459FAACB9A3EABAF13B2F3FE872E9A537B434EA7831865B0FB7739CFC73816452A9D4DEBEABB10AF2FB010A2EA0BACB6A0DD553A073F1A6907B4AD47C1AD9528C810A2C6151FAB9B7BC8F7037F43BAA82F23A0495AEE5030A8538AF833B65E14C714279B4A80BA1430A6167BCB300D76F100D35F7777799E6356F8C92AF523230DCE28DAA1D7442630608305ABBE125E0CA939CC8B7940E7719DFFC303BF9C0EA3F14EAF216E25B45A629A4D4E08B1B1A291C448CDDCF75B54EA422101E3C9D6DA216BA5924982C855F375F67D02D004C0D15D3892BA93E9BD387CAC2ED76AF0C3CA0CFB2F8BC5C09499E8D10B127FDFFBA99F96B7EE475FCA7711C53F45370FA833D7793EF2614A9B2DE67D77E68D75399CE085712453459A88ECA536D47A8E65E0731B0EB20117DAA3F21616E76F812491DE6CEEAB13595B2FA91BD2C403D77721FB80B39959218692A021B1EFE489EC556200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/MyriadPro-BoldCond cguidfix
/F1.1/MyriadPro-BoldCond renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs4 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 1395 1020 rc
0 1020 m
1395 1020 l
1395 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-1788 2554 m
3544 2554 l
3544 -1950 l
-1788 -1950 l
h
-1788 2554 m
f
0 1019.25 m
1395 1019.25 l
1395 0.25 l
0 0.25 l
h
0 1019.25 m
f
/Cs3 SC
0 sc
1 0 0 -1 -247 1130 cm
/F1.1[ 16 0 0 -16 0 0]sf
910.55603 137.5 m
(!"#$%&#'\(\)*)[ 7.856000 7.232000 3.968000 6.576000 7.328000 7.520000 3.968000 7.104000 3.728000 6.304000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
478.36664 266.85794 m
513.22278 232.00197 513.22278 175.48932 478.36664 140.63336 c
443.51068 105.77721 386.99805 105.77721 352.14206 140.63336 c
317.28592 175.48932 317.28592 232.00197 352.14206 266.85794 c
386.99805 301.71408 443.51068 301.71408 478.36664 266.85794 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -247 1130 cm
725.36664 863.14209 m
760.22278 897.99805 760.22278 954.51068 725.36664 989.36664 c
690.51068 1024.2228 633.99805 1024.2228 599.14209 989.36664 c
564.28589 954.51068 564.28589 897.99805 599.14209 863.14209 c
633.99805 828.28589 690.51068 828.28589 725.36664 863.14209 c
S
0.5 w
1 1 1 sc
725.36664 863.14209 m
760.22278 897.99805 760.22278 954.51068 725.36664 989.36664 c
690.51068 1024.2228 633.99805 1024.2228 599.14209 989.36664 c
564.28589 954.51068 564.28589 897.99805 599.14209 863.14209 c
633.99805 828.28589 690.51068 828.28589 725.36664 863.14209 c
S
/Cs1 SC
0 sc
0 i
/F1.1[ 24 0 0 -24 0 0]sf
651.69434 929.85437 m
(+,)[ 12.000000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
785.88824 573.38824 m
834.70398 524.57275 834.70398 445.42725 785.88824 396.61176 c
737.07275 347.79599 657.92725 347.79599 609.11176 396.61176 c
560.29602 445.42725 560.29602 524.57275 609.11176 573.38824 c
657.92725 622.20398 737.07275 622.20398 785.88824 573.38824 c
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -247 1130 cm
1032.8883 556.61176 m
1081.704 605.42725 1081.704 684.57275 1032.8883 733.38824 c
984.07275 782.20398 904.92725 782.20398 856.11176 733.38824 c
807.29602 684.57275 807.29602 605.42725 856.11176 556.61176 c
904.92725 507.79599 984.07275 507.79599 1032.8883 556.61176 c
S
0.5 w
1 1 1 sc
1032.8883 556.61176 m
1081.704 605.42725 1081.704 684.57275 1032.8883 733.38824 c
984.07275 782.20398 904.92725 782.20398 856.11176 733.38824 c
807.29602 684.57275 807.29602 605.42725 856.11176 556.61176 c
904.92725 507.79599 984.07275 507.79599 1032.8883 556.61176 c
S
/Cs1 SC
0 sc
0 i
924.49597 634.20001 m
(-%.*)[ 8.616000 10.608000 11.328000 0.000000 ] xS
914.38 663 m
(/-0,12)[ 12.360000 9.432000 15.288000 9.120000 3.816000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
350.36664 548.1123 m
385.22278 513.25635 385.22278 456.74368 350.36664 421.88773 c
315.51068 387.03156 258.99805 387.03156 224.14206 421.88773 c
189.28592 456.74368 189.28592 513.25635 224.14206 548.1123 c
258.99805 582.96844 315.51068 582.96844 350.36664 548.1123 c
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -247 1130 cm
597.36664 581.8877 m
632.22278 616.74365 632.22278 673.25635 597.36664 708.1123 c
562.51068 742.96844 505.99805 742.96844 471.14206 708.1123 c
436.28592 673.25635 436.28592 616.74365 471.14206 581.8877 c
505.99805 547.03156 562.51068 547.03156 597.36664 581.8877 c
S
0.5 w
1 1 1 sc
597.36664 581.8877 m
632.22278 616.74365 632.22278 673.25635 597.36664 708.1123 c
562.51068 742.96844 505.99805 742.96844 471.14206 708.1123 c
436.28592 673.25635 436.28592 616.74365 471.14206 581.8877 c
505.99805 547.03156 562.51068 547.03156 597.36664 581.8877 c
S
/Cs1 SC
0 sc
0 i
526.71838 648.59998 m
(,#)[ 9.120000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
485.36664 823.85791 m
520.22278 789.00195 520.22278 732.48932 485.36664 697.63336 c
450.51068 662.77722 393.99805 662.77722 359.14206 697.63336 c
324.28592 732.48932 324.28592 789.00195 359.14206 823.85791 c
393.99805 858.71411 450.51068 858.71411 485.36664 823.85791 c
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -247 1130 cm
732.36664 306.14206 m
767.22278 340.99805 767.22278 397.51068 732.36664 432.36664 c
697.51068 467.22278 640.99805 467.22278 606.14209 432.36664 c
571.28589 397.51068 571.28589 340.99805 606.14209 306.14206 c
640.99805 271.28592 697.51068 271.28592 732.36664 306.14206 c
S
0.5 w
1 1 1 sc
732.36664 306.14206 m
767.22278 340.99805 767.22278 397.51068 732.36664 432.36664 c
697.51068 467.22278 640.99805 467.22278 606.14209 432.36664 c
571.28589 397.51068 571.28589 340.99805 606.14209 306.14206 c
640.99805 271.28592 697.51068 271.28592 732.36664 306.14206 c
S
/Cs1 SC
0 sc
0 i
635.11438 372.85434 m
(*\)$-#'3)[ 9.456000 9.456000 10.056000 9.432000 5.952000 11.544000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
1107.3667 823.85791 m
1142.2228 789.00195 1142.2228 732.48932 1107.3667 697.63336 c
1072.5106 662.77722 1015.998 662.77722 981.14209 697.63336 c
946.28589 732.48932 946.28589 789.00195 981.14209 823.85791 c
1015.998 858.71411 1072.5106 858.71411 1107.3667 823.85791 c
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -247 1130 cm
1354.3667 306.14206 m
1389.2228 340.99805 1389.2228 397.51068 1354.3667 432.36664 c
1319.5106 467.22278 1262.998 467.22278 1228.1421 432.36664 c
1193.2859 397.51068 1193.2859 340.99805 1228.1421 306.14206 c
1262.998 271.28592 1319.5106 271.28592 1354.3667 306.14206 c
S
0.5 w
1 1 1 sc
1354.3667 306.14206 m
1389.2228 340.99805 1389.2228 397.51068 1354.3667 432.36664 c
1319.5106 467.22278 1262.998 467.22278 1228.1421 432.36664 c
1193.2859 397.51068 1193.2859 340.99805 1228.1421 306.14206 c
1262.998 271.28592 1319.5106 271.28592 1354.3667 306.14206 c
S
/Cs1 SC
0 sc
0 i
1285.7704 372.85434 m
(4)s
/Cs2 SC
1 1 1 sc
CM
1170.8579 554.85791 m
1205.7141 520.00195 1205.7141 463.48932 1170.8579 428.63336 c
1136.002 393.77722 1079.4894 393.77722 1044.6333 428.63336 c
1009.7772 463.48932 1009.7772 520.00195 1044.6333 554.85791 c
1079.4894 589.71411 1136.002 589.71411 1170.8579 554.85791 c
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -247 1130 cm
1417.8579 575.14209 m
1452.7141 609.99805 1452.7141 666.51068 1417.8579 701.36664 c
1383.002 736.22278 1326.4894 736.22278 1291.6333 701.36664 c
1256.7772 666.51068 1256.7772 609.99805 1291.6333 575.14209 c
1326.4894 540.28589 1383.002 540.28589 1417.8579 575.14209 c
S
0.5 w
1 1 1 sc
1417.8579 575.14209 m
1452.7141 609.99805 1452.7141 666.51068 1417.8579 701.36664 c
1383.002 736.22278 1326.4894 736.22278 1291.6333 701.36664 c
1256.7772 666.51068 1256.7772 609.99805 1291.6333 575.14209 c
1326.4894 540.28589 1383.002 540.28589 1417.8579 575.14209 c
S
/Cs1 SC
0 sc
0 i
1333.3496 641.85437 m
(*4%3)[ 9.456000 9.960000 10.992000 0.000000 ] xS
1 w
0.60000002 i
/Cs4 SC
0 0 0 sc
856.19202 556.53156 m
732.30933 432.42389 l
S
819.49994 645 m
623.50873 645 l
S
855.95642 733.2326 m
725.4776 863.25317 l
S
1069.4833 642.94489 m
1265.5033 639.72174 l
S
1042.3452 567.19165 m
1221.3895 424.81223 l
S
0 i
/Cs2 SC
1 1 1 sc
CM
1048.3667 285.85794 m
1083.2228 251.00197 1083.2228 194.48932 1048.3667 159.63336 c
1013.5107 124.77721 956.99805 124.77721 922.14209 159.63336 c
887.28589 194.48932 887.28589 251.00197 922.14209 285.85794 c
956.99805 320.71408 1013.5107 320.71408 1048.3667 285.85794 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -247 1130 cm
1295.3667 844.14209 m
1330.2228 878.99805 1330.2228 935.51068 1295.3667 970.36664 c
1260.5106 1005.2228 1203.998 1005.2228 1169.1421 970.36664 c
1134.2859 935.51068 1134.2859 878.99805 1169.1421 844.14209 c
1203.998 809.28589 1260.5106 809.28589 1295.3667 844.14209 c
S
0.5 w
1 1 1 sc
1295.3667 844.14209 m
1330.2228 878.99805 1330.2228 935.51068 1295.3667 970.36664 c
1260.5106 1005.2228 1203.998 1005.2228 1169.1421 970.36664 c
1134.2859 935.51068 1134.2859 878.99805 1169.1421 844.14209 c
1203.998 809.28589 1260.5106 809.28589 1295.3667 844.14209 c
S
/Cs1 SC
0 sc
0 i
1199.5903 910.85437 m
(/\)%!\)&)[ 12.360000 9.456000 10.992000 11.784000 9.456000 0.000000 ] xS
1 w
0.60000002 i
/Cs4 SC
0 0 0 sc
1036.8888 729.20154 m
1166.2855 847.13153 l
S
ep
end
%%Trailer
%%EOF
